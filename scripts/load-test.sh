#!/bin/bash

# ‚ö° Load testing Enterprise Multi-MCP Smart Database System

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
CONCURRENT_USERS=${1:-50}
REQUESTS_PER_USER=${2:-20}
RAMP_UP_TIME=${3:-10}
TEST_DURATION=${4:-60}

print_header() {
    echo -e "${BLUE}"
    echo "‚ö° =================================================="
    echo "   –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MCP DATABASE"
    echo "=================================================="
    echo "üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞:"
    echo "   üë• –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $CONCURRENT_USERS"
    echo "   üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $REQUESTS_PER_USER"
    echo "   ‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏: ${RAMP_UP_TIME}s"
    echo "   üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: ${TEST_DURATION}s"
    echo "==================================================${NC}"
    echo ""
}

check_system() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã...${NC}"
    
    if ! curl -s http://localhost:3000/api/v1/health > /dev/null; then
        echo -e "${RED}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é${NC}"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
generate_test_data() {
    local user_id=$1
    local request_id=$2
    local data_type=$((RANDOM % 4))
    
    case $data_type in
        0)
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            echo '{
                "data": {
                    "user_activity": {
                        "userId": "load_test_user_'$user_id'",
                        "action": "page_view",
                        "page": "/dashboard",
                        "timestamp": '$(date +%s000)',
                        "sessionId": "session_'$user_id'_'$request_id'",
                        "userAgent": "LoadTestAgent/1.0"
                    }
                },
                "metadata": {
                    "source": "load_test",
                    "testId": "'$user_id'_'$request_id'"
                }
            }'
            ;;
        1)
            # –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            echo '{
                "data": {
                    "chat_message": {
                        "messageId": "load_msg_'$user_id'_'$request_id'",
                        "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '$user_id' –∑–∞–ø—Ä–æ—Å '$request_id'",
                        "userId": "load_test_user_'$user_id'",
                        "channelId": "load_test_channel",
                        "timestamp": '$(date +%s000)'
                    }
                }
            }'
            ;;
        2)
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            echo '{
                "data": {
                    "system_metric": {
                        "metricId": "load_metric_'$user_id'_'$request_id'",
                        "name": "cpu_usage",
                        "value": '$((RANDOM % 100))',
                        "timestamp": '$(date +%s000)',
                        "source": "load_test_server_'$user_id'"
                    }
                }
            }'
            ;;
        3)
            # –õ–æ–≥ –∑–∞–ø–∏—Å–∏
            echo '{
                "data": {
                    "log_entry": {
                        "logId": "load_log_'$user_id'_'$request_id'",
                        "level": "INFO",
                        "message": "Load test log entry from user '$user_id' request '$request_id'",
                        "timestamp": '$(date +%s000)',
                        "source": "load_test"
                    }
                }
            }'
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
simulate_user() {
    local user_id=$1
    local start_delay=$2
    
    # –ñ–¥–µ–º –≤—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    sleep $start_delay
    
    local successful_requests=0
    local failed_requests=0
    local total_response_time=0
    
    for request_id in $(seq 1 $REQUESTS_PER_USER); do
        local start_time=$(date +%s%3N)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        local test_data=$(generate_test_data $user_id $request_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        local response=$(curl -s -w "%{http_code}" -X POST http://localhost:3000/api/v1/ingest \
            -H "Content-Type: application/json" \
            -d "$test_data" 2>/dev/null)
        
        local end_time=$(date +%s%3N)
        local response_time=$((end_time - start_time))
        total_response_time=$((total_response_time + response_time))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        local http_code="${response: -3}"
        local response_body="${response%???}"
        
        if [ "$http_code" = "200" ]; then
            local success=$(echo "$response_body" | jq -r '.success' 2>/dev/null)
            if [ "$success" = "true" ]; then
                successful_requests=$((successful_requests + 1))
            else
                failed_requests=$((failed_requests + 1))
            fi
        else
            failed_requests=$((failed_requests + 1))
        fi
        
        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (50-200ms)
        sleep 0.$((RANDOM % 150 + 50))
    done
    
    local avg_response_time=$((total_response_time / REQUESTS_PER_USER))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    echo "$user_id,$successful_requests,$failed_requests,$avg_response_time" >> /tmp/load_test_results.csv
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
monitor_system() {
    local test_start_time=$(date +%s)
    
    echo "timestamp,memory_mb,connections,qps,avg_response_ms,cache_hit_rate" > /tmp/system_metrics.csv
    
    while [ $(($(date +%s) - test_start_time)) -lt $((TEST_DURATION + RAMP_UP_TIME + 10)) ]; do
        local metrics=$(curl -s http://localhost:3000/api/v1/metrics 2>/dev/null)
        
        if [ $? -eq 0 ]; then
            local timestamp=$(date +%s)
            local memory=$(echo "$metrics" | jq -r '.memoryUsage' 2>/dev/null || echo "0")
            local connections=$(echo "$metrics" | jq -r '.activeConnections' 2>/dev/null || echo "0")
            local qps=$(echo "$metrics" | jq -r '.queriesPerSecond' 2>/dev/null || echo "0")
            local avg_response=$(echo "$metrics" | jq -r '.averageResponseTime' 2>/dev/null || echo "0")
            local cache_hit=$(echo "$metrics" | jq -r '.cacheHitRatio' 2>/dev/null || echo "0")
            
            echo "$timestamp,$memory,$connections,$qps,$avg_response,$cache_hit" >> /tmp/system_metrics.csv
        fi
        
        sleep 2
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_load_test() {
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...${NC}"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    rm -f /tmp/load_test_results.csv /tmp/system_metrics.csv
    echo "user_id,successful_requests,failed_requests,avg_response_time_ms" > /tmp/load_test_results.csv
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ–Ω–µ
    monitor_system &
    local monitor_pid=$!
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    local initial_metrics=$(curl -s http://localhost:3000/api/v1/metrics)
    local initial_memory=$(echo "$initial_metrics" | jq -r '.memoryUsage' 2>/dev/null || echo "0")
    
    echo -e "${YELLOW}üìä –ù–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:${NC}"
    echo "   üíæ –ü–∞–º—è—Ç—å: ${initial_memory}MB"
    echo ""
    
    local test_start_time=$(date +%s)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in $(seq 1 $CONCURRENT_USERS); do
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        local start_delay=$(echo "scale=2; $RAMP_UP_TIME * ($user_id - 1) / $CONCURRENT_USERS" | bc -l 2>/dev/null || echo "0")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–µ
        simulate_user $user_id $start_delay &
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if [ $((user_id % 10)) -eq 0 ]; then
            echo -e "${BLUE}üë• –ó–∞–ø—É—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $user_id/$CONCURRENT_USERS${NC}"
        fi
    done
    
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...${NC}"
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    wait
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    kill $monitor_pid 2>/dev/null || true
    
    local test_end_time=$(date +%s)
    local actual_test_duration=$((test_end_time - test_start_time))
    
    echo -e "${GREEN}‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    echo "   ‚è±Ô∏è –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: ${actual_test_duration}s"
    echo ""
}

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    echo -e "${BLUE}üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...${NC}"
    echo ""
    
    if [ ! -f "/tmp/load_test_results.csv" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    local total_users=$(tail -n +2 /tmp/load_test_results.csv | wc -l)
    local total_successful=$(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$2} END {print sum+0}')
    local total_failed=$(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$3} END {print sum+0}')
    local total_requests=$((total_successful + total_failed))
    local success_rate=$(echo "scale=2; $total_successful * 100 / $total_requests" | bc -l 2>/dev/null || echo "0")
    
    # –°—Ä–µ–¥–Ω–∏–π –æ—Ç–∫–ª–∏–∫
    local avg_response=$(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$4; count++} END {print (count>0) ? sum/count : 0}')
    
    # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    local throughput=$(echo "scale=2; $total_successful / $TEST_DURATION" | bc -l 2>/dev/null || echo "0")
    
    echo -e "${GREEN}üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:${NC}"
    echo "=================================================="
    echo "üë• –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:"
    echo "   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $total_users"
    echo "   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: $total_requests"
    echo "   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: $total_successful"
    echo "   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: $total_failed"
    echo "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${success_rate}%"
    echo ""
    echo "‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
    echo "   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_response}ms"
    echo "   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${throughput} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫"
    echo ""
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    if [ -f "/tmp/system_metrics.csv" ]; then
        local max_memory=$(tail -n +2 /tmp/system_metrics.csv | awk -F',' '{if($2>max) max=$2} END {print max+0}')
        local max_connections=$(tail -n +2 /tmp/system_metrics.csv | awk -F',' '{if($3>max) max=$3} END {print max+0}')
        local max_qps=$(tail -n +2 /tmp/system_metrics.csv | awk -F',' '{if($4>max) max=$4} END {print max+0}')
        local avg_cache_hit=$(tail -n +2 /tmp/system_metrics.csv | awk -F',' '{sum+=$6; count++} END {print (count>0) ? sum/count : 0}')
        
        echo "üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:"
        echo "   ‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${max_memory}MB"
        echo "   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: $max_connections"
        echo "   ‚Ä¢ –ü–∏–∫–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${max_qps} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫"
        echo "   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫–æ—ç—Ñ. –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à: ${avg_cache_hit}%"
        echo ""
    fi
    
    # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    echo "üéØ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    
    if (( $(echo "$success_rate >= 95" | bc -l 2>/dev/null) )); then
        echo -e "   ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (${success_rate}% —É—Å–ø–µ—Ö–∞)${NC}"
    elif (( $(echo "$success_rate >= 90" | bc -l 2>/dev/null) )); then
        echo -e "   ${YELLOW}‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (${success_rate}% —É—Å–ø–µ—Ö–∞)${NC}"
    else
        echo -e "   ${RED}‚ùå –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (${success_rate}% —É—Å–ø–µ—Ö–∞)${NC}"
    fi
    
    if (( $(echo "$avg_response <= 200" | bc -l 2>/dev/null) )); then
        echo -e "   ${GREEN}‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (${avg_response}ms)${NC}"
    elif (( $(echo "$avg_response <= 500" | bc -l 2>/dev/null) )); then
        echo -e "   ${YELLOW}‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (${avg_response}ms)${NC}"
    else
        echo -e "   ${RED}‚ùå –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (${avg_response}ms)${NC}"
    fi
    
    if (( $(echo "$throughput >= 100" | bc -l 2>/dev/null) )); then
        echo -e "   ${GREEN}‚úÖ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (${throughput} req/s)${NC}"
    elif (( $(echo "$throughput >= 50" | bc -l 2>/dev/null) )); then
        echo -e "   ${YELLOW}‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (${throughput} req/s)${NC}"
    else
        echo -e "   ${RED}‚ùå –ù–∏–∑–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (${throughput} req/s)${NC}"
    fi
    
    echo "=================================================="
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
save_report() {
    local report_file="load_test_report_$(date +%Y%m%d_%H%M%S).html"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Load Test Report - Enterprise MCP Database</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f8ff; padding: 20px; border-radius: 10px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
        .metric-card { background: #f9f9f9; padding: 15px; border-radius: 8px; border-left: 4px solid #007acc; }
        .success { color: #28a745; }
        .warning { color: #ffc107; }
        .error { color: #dc3545; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ Load Test Report - Enterprise MCP Database</h1>
        <p><strong>Date:</strong> $(date)</p>
        <p><strong>Test Parameters:</strong> $CONCURRENT_USERS users, $REQUESTS_PER_USER requests each, ${TEST_DURATION}s duration</p>
    </div>
    
    <div class="metrics">
        <div class="metric-card">
            <h3>üìä Request Statistics</h3>
            <p><strong>Total Requests:</strong> $(($(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$2+$3} END {print sum+0}')))</p>
            <p><strong>Successful:</strong> $(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$2} END {print sum+0}')</p>
            <p><strong>Failed:</strong> $(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$3} END {print sum+0}')</p>
        </div>
        
        <div class="metric-card">
            <h3>‚ö° Performance</h3>
            <p><strong>Avg Response Time:</strong> $(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$4; count++} END {print (count>0) ? sum/count : 0}')ms</p>
            <p><strong>Throughput:</strong> $(echo "scale=2; $(tail -n +2 /tmp/load_test_results.csv | awk -F',' '{sum+=$2} END {print sum+0}') / $TEST_DURATION" | bc -l 2>/dev/null) req/s</p>
        </div>
    </div>
    
    <h2>üìà Detailed Results</h2>
    <table>
        <tr><th>User ID</th><th>Successful</th><th>Failed</th><th>Avg Response (ms)</th></tr>
EOF
    
    tail -n +2 /tmp/load_test_results.csv | while IFS=',' read -r user_id successful failed avg_response; do
        echo "        <tr><td>$user_id</td><td>$successful</td><td>$failed</td><td>$avg_response</td></tr>" >> "$report_file"
    done
    
    cat >> "$report_file" << EOF
    </table>
    
    <p><em>Generated by Enterprise MCP Database Load Testing Tool</em></p>
</body>
</html>
EOF
    
    echo -e "${GREEN}üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file${NC}"
}

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cleanup() {
    rm -f /tmp/load_test_results.csv /tmp/system_metrics.csv
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if ! command -v bc >/dev/null 2>&1; then
        echo -e "${RED}‚ùå bc –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install bc${NC}"
        exit 1
    fi
    
    check_system
    run_load_test
    analyze_results
    save_report
    cleanup
    
    echo -e "${GREEN}üéâ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap cleanup EXIT

# Run
main "$@"